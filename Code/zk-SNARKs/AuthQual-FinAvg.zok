// this snark compares the encrypted value submitted by a worker
// with the final answer
// and then accordingly updates the worker quality
// and then spits out the committed new quality
// snark only works for ZoKrates v0.7 or above

from "ecc/babyjubjubParams" import BabyJubJubParams
import "ecc/edwardsScalarMult" as scalarMult
import "ecc/edwardsAdd" as add
import "utils/pack/bool/nonStrictUnpack256" as unpack256
import "ecc/babyjubjubParams" as context
import "utils/pack/u32/pack" as pack    // only for latest ZoKrates version
import "ecc/edwardsNegate" as negate
import "./ee" as elgamalEncrypt    // make sure elgamal.zok is present in the current directory; or write the absolute path
import "./pedersen" as pedersen
import "utils/pack/bool/pack" as unconstrainedPack



def decryption(bool[256] boolPrikey, field[2] C0, field[2] C1, BabyJubJubParams CP) -> (field):
  field[2] S = scalarMult(boolPrikey, C0, CP)
  field[2] M = add(C1, negate(S), CP)
  return M[0]



def main(public field noOfWorkers, public field range, field[2] authorityPublicKey1, field[2] authorityPublicKey2, private field authorityPrivateKey, public field[2] new_alpha, public field[2] new_beta, field[2] worker_c0, field[2] worker_c1, field[2] final_c0, field[2] final_c1, public field[2] old_alpha_commitment, public field[2] old_beta_commitment, private field[2] randomsecret)->(bool):

  // let us get the field ready
  BabyJubJubParams cp = context()

  // first check the validity of the public-private key pair of the requester
  bool[256] boolPrikey = unpack256(authorityPrivateKey)
  assert(scalarMult(boolPrikey,authorityPublicKey1,cp)==authorityPublicKey2)



  // let us get the decrypted values
  field worker_plainResponse = decryption(boolPrikey, worker_c0, worker_c1, cp)
 
  worker_plainResponse = if worker_plainResponse == 16 then 1 else worker_plainResponse fi
  worker_plainResponse = if worker_plainResponse == 8 then 3 else worker_plainResponse fi
  worker_plainResponse = if worker_plainResponse == 9 then 4 else worker_plainResponse fi

 
 field final_plainResponse = decryption(boolPrikey, final_c0, final_c1, cp)
  field final_plainResponse_UL = final_plainResponse + range
  field final_plainResponse_LL = final_plainResponse - range
  field weightedAnswer = worker_plainResponse*noOfWorkers


  // create the pedersen commitment for m=1 and r= randomsecret[1]
  field[2] ComOne = pedersen(1,randomsecret[0])
  // create the pedersen commitment for m=0 and r=randomsecret[2]
  field[2] ComZero = pedersen(0,randomsecret[1])

  // time to update quality
  // if the submitted answer lies in the expected 'range' add "1" to index "0"
  // otherwise add "1" to index "1"
  field[2] new_quality_alpha = if weightedAnswer <= final_plainResponse_UL && weightedAnswer >= final_plainResponse_LL then add(old_alpha_commitment, ComOne, cp) else add(old_alpha_commitment, ComZero, cp) fi
  field[2] new_quality_beta = if weightedAnswer <= final_plainResponse_UL && weightedAnswer >= final_plainResponse_LL then add(old_beta_commitment, ComZero, cp) else add(old_beta_commitment, ComOne, cp) fi

	
assert(new_alpha == new_quality_alpha)
assert(new_beta == new_quality_beta)

  return true
