// this snark compares the encrypted value submitted by a worker
// with the final answer
// snark only works for ZoKrates v0.7 or above

from "ecc/babyjubjubParams" import BabyJubJubParams
import "ecc/edwardsScalarMult" as scalarMult
import "ecc/edwardsAdd" as add
import "utils/pack/bool/nonStrictUnpack256" as unpack256
import "ecc/babyjubjubParams" as context
import "utils/pack/u32/pack" as pack    // only for latest ZoKrates version
import "ecc/edwardsNegate" as negate
import "utils/pack/bool/pack" as unconstrainedPack



def decryption(bool[256] boolPrikey, field[2] C0, field[2] C1, BabyJubJubParams CP) -> (field):
  field[2] S = scalarMult(boolPrikey, C0, CP)
  field[2] M = add(C1, negate(S), CP)
  return M[0]



def main(field[2] authorityPublicKey1, field[2] authorityPublicKey2, private field authorityPrivateKey,  field[2] worker_c0, field[2] worker_c1, field[2] final_c0, field[2] final_c1)->(bool):
  // let us get the field ready
  BabyJubJubParams cp = context()


  // first check the validity of the public-private key pair of the requester
  bool[256] boolPrikey = unpack256(authorityPrivateKey)
  assert(scalarMult(boolPrikey,authorityPublicKey1,cp)==authorityPublicKey2)



  // let us get the decrypted values
  field worker_plainResponse = decryption(boolPrikey, worker_c0, worker_c1, cp)
  field final_plainResponse = decryption(boolPrikey, final_c0, final_c1, cp)

  bool flag = false
  
  flag = if worker_plainResponse == final_plainResponse then true else false fi

//  assert(worker_plainResponse == final_plainResponse) // throw an error if the values were not same
  return flag
