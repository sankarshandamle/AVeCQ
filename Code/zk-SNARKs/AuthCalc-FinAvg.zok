// this code implements "AuthCalc"
// final answer = Avg. of all responses
// we output the (encrypted) sum of all the responses

from "ecc/babyjubjubParams" import BabyJubJubParams
import "ecc/edwardsScalarMult" as scalarMult
import "ecc/edwardsAdd" as add
import "utils/pack/bool/nonStrictUnpack256" as unpack256
import "ecc/babyjubjubParams" as context
import "utils/pack/u32/pack" as pack    // only for latest ZoKrates version
import "ecc/edwardsNegate" as negate
import "./ee" as elgamal
import "utils/casts/field_to_u32" as field_to_u32
import "utils/casts/u32_to_field" as u32_to_field
import "utils/pack/bool/pack" as unconstrainedPack

def decryption(bool[256] boolPrikey, field[2] C0, field[2] C1, BabyJubJubParams CP) -> (field):
  field[2] S = scalarMult(boolPrikey, C0, CP)
  field[2] M = add(C1, negate(S), CP)
  M[0] = if M[0] == 16 then 1 else M[0] fi
  M[0] = if M[0] == 8 then 3 else M[0] fi
  M[0] = if M[0] == 9 then 4 else M[0] fi
  return M[0]


def main(public field[2] authorityPublicKey1, field[2] authorityPublicKey2, private field authorityPrivateKey, public field[4] correctAns, field[128][2] c0, field[128][2] c1, private field newRandomSecret, private field yAxis)->(bool):

// let us get the field ready
BabyJubJubParams cp = context()

// first check the validity of the public-private key pair of the requester
bool[256] boolPrikey = unpack256(authorityPrivateKey)
assert(scalarMult(boolPrikey,authorityPublicKey1,cp)==authorityPublicKey2)


// python like list; to store decrypted answers; size -> n x 2
field[128] pureAnswers = [0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0
]

//field[4] pureAnswers = [0,0,0,0]

// let us get the decrypted values
for u32 i in 0..128 do
  pureAnswers[i] = decryption(boolPrikey, c0[i], c1[i], cp)
endfor

// compute the final answer
// final answer = sum of all the answers
// loop across all workers
field final_answer = 0
for u32 i in 0..128 do
  final_answer = final_answer + pureAnswers[i]
endfor

field[4] finalEnc = elgamal([final_answer,yAxis], authorityPublicKey1, authorityPublicKey2, newRandomSecret)

assert(finalEnc == correctAns)


return true
